@using Microsoft.AspNet.Identity;
@using Microsoft.AspNet.Identity.Owin;
@using System.Web;
@model PagedList.IPagedList<AdobeLicenseManagement.Models.ApplicationUser>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Users Table";
}

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<div class="col-md-8">
    @using (Html.BeginForm("Index", "UsersAdmin", FormMethod.Get))
    {
        <p title="Search by Username">
            @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "form-control" })
            <button type="submit" value="Search" class="btn btn-default">Search</button>
        </p>
    }
</div>

<div class="col-md-4">
    @using (Html.BeginForm("Index", "UsersAdmin", FormMethod.Get))
    {
        <p title="Change number of items on each page">
            Page Size: @Html.TextBox("pageSize", ViewBag.PageSize as string, new { @class = "form-control" })
            <button type="submit" value="Submit" class="btn btn-default">Submit</button>
        </p>
    }
</div>

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Username", "Index", new { sortOrder = ViewBag.UserNameSortParam, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            <!-- Link not actually used for sorting -->
            @Html.ActionLink("Roles", "Index", new { sortOrder = ViewBag.RolesSortParam, currentFilter = ViewBag.CurrentFilter }, new { @style = "pointer-events: none; cursor: default" })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.UserName)
            </td>

            <td>
                @foreach (var role in item.Roles)
                {
                    if (Int32.Parse(role.RoleId) == 1)
                    {
                        <p>Owner</p>
                    }
                    else if (Int32.Parse(role.RoleId) == 2)
                    {
                        <p>Administrator</p>
                    }
                    else if (Int32.Parse(role.RoleId) == 3)
                    {
                        <p>Super User</p>
                    }
                    else if (Int32.Parse(role.RoleId) == 4)
                    {
                        <p>User</p>
                    }
                    else
                    {
                        <p>Err: Unknown role</p>
                    }
                }
            </td>
            
            @{  var userManager = HttpContext.Current.GetOwinContext().GetUserManager<ApplicationUserManager>();
                var rolesForUser = userManager.GetRoles(item.Id);
            }

            @if (!ViewData["Current User"].Equals(item.UserName) && (!rolesForUser.Contains("Owner") || User.IsInRole("Owner")))
            {
                <!-- Show the edit/delete buttons if the user selected is not the user logged in (can't change their own roles)
                    and if the selected user is not an owner or the current logged in user is an own -->
                <td>
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id, UserName = item.UserName }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            }
            else
            {
                <td>
                    @Html.ActionLink("Details", "Details", new { id = item.Id })
                </td>
            }
        </tr>
    }

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, page, pageSize = ViewBag.PageSize }))

@Html.Partial("RoleDescriptions")